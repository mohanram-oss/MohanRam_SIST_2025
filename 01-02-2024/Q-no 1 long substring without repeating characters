Given a string s, find the length of the longest substring without repeating characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.



class Solution:
    def lengthOfLongestSubstring(self, s: str) -> int:# Python3 program to 

	    n = len(string) 


	    st = 0

	
        maxlen = 0

	
	    start = 0

	
	    pos = {} 

	
	    pos[string[0]] = 0

	    for i in range(1, n): 

		
		    if string[i] not in pos: 
			    pos[string[i]] = i 

		    else:
			
			    if pos[string[i]] >= st: 

				 
				    currlen = i - st 
				    if maxlen < currlen: 
					    maxlen = currlen 
					    start = st 

				
				        st = pos[string[i]] + 1
			
			 
			            pos[string[i]] = i 
		
	
	    if maxlen < i - st: 
		    maxlen = i - st 
		    start = st 
	
	
	    return string[start : start + maxlen] 


